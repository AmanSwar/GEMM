#include <cuda_runtime.h>
#include <iostream>

/*
GENERATED BY GOOGLE GEMINI 2.5 PRO
*/

#define checkCudaErrors(val) check_cuda((val), #val, __FILE__, __LINE__)

void check_cuda(cudaError_t result, char const *const func,
                const char *const file, int const line) {
  if (result) {
    std::cerr << "CUDA error at " << file << ":" << line
              << " code=" << static_cast<unsigned int>(result) << " \""
              << cudaGetErrorString(result) << "\" for " << func << std::endl;
    cudaDeviceReset();
    exit(99);
  }
}

int main() {
  int deviceCount = 0;
  checkCudaErrors(cudaGetDeviceCount(&deviceCount));

  if (deviceCount == 0) {
    std::cerr << "No CUDA-enabled devices found." << std::endl;
    return 1;
  }

  std::cout << "Found " << deviceCount << " CUDA-enabled device(s)."
            << std::endl;
  std::cout << "----------------------------------------" << std::endl;

  for (int dev = 0; dev < deviceCount; ++dev) {
    checkCudaErrors(cudaSetDevice(dev));

    // Create a struct to hold device properties
    cudaDeviceProp deviceProp;

    // Get the properties of the current device
    checkCudaErrors(cudaGetDeviceProperties(&deviceProp, dev));

    std::cout << "Device " << dev << ": \"" << deviceProp.name << "\""
              << std::endl;
    std::cout << "  CUDA Capability Major/Minor version: " << deviceProp.major
              << "." << deviceProp.minor << std::endl;
    std::cout << "  Total global memory: "
              << (unsigned long long)deviceProp.totalGlobalMem / (1024 * 1024)
              << " MB" << std::endl;
    std::cout << "  Total constant memory: " << deviceProp.totalConstMem / 1024
              << " KB" << std::endl;

    std::cout << "\n  --- Multiprocessor (SM) & Core Metrics ---" << std::endl;
    std::cout << "  Multiprocessor count: " << deviceProp.multiProcessorCount
              << std::endl;
    std::cout << "  CUDA Cores per multiprocessor: "
              << (deviceProp.major, deviceProp.minor)
              << std::endl;
    std::cout << "  Total CUDA Cores: "
              << (deviceProp.major, deviceProp.minor) *
                     deviceProp.multiProcessorCount
              << std::endl;

    std::cout << "\n  --- Memory & Cache Metrics ---" << std::endl;
    std::cout << "  Maximum shared memory per multiprocessor (SM): "
              << deviceProp.sharedMemPerMultiprocessor / 1024 << " KB"
              << std::endl;
    std::cout << "  Maximum shared memory per block: "
              << deviceProp.sharedMemPerBlock / 1024 << " KB" << std::endl;
    std::cout << "  L2 cache size: " << deviceProp.l2CacheSize / 1024 << " KB"
              << std::endl;
    std::cout << "  Memory clock rate: " << deviceProp.memoryClockRate / 1000
              << " MHz" << std::endl;
    std::cout << "  Memory bus width: " << deviceProp.memoryBusWidth << "-bit"
              << std::endl;
    std::cout << "  Peak memory bandwidth: "
              << 2.0 * deviceProp.memoryClockRate *
                     (deviceProp.memoryBusWidth / 8) / 1.0e6
              << " GB/s" << std::endl;

    std::cout << "\n  --- Thread & Block Metrics ---" << std::endl;
    std::cout << "  Maximum registers per multiprocessor (SM): "
              << deviceProp.regsPerMultiprocessor << std::endl;
    std::cout << "  Maximum registers per block: " << deviceProp.regsPerBlock
              << std::endl;
    std::cout << "  Maximum threads per multiprocessor: "
              << deviceProp.maxThreadsPerMultiProcessor << std::endl;
    std::cout << "  Maximum threads per block: "
              << deviceProp.maxThreadsPerBlock << std::endl;
    std::cout << "  Maximum thread dimensions (x, y, z): ("
              << deviceProp.maxThreadsDim[0] << ", "
              << deviceProp.maxThreadsDim[1] << ", "
              << deviceProp.maxThreadsDim[2] << ")" << std::endl;
    std::cout << "  Maximum grid dimensions (x, y, z): ("
              << deviceProp.maxGridSize[0] << ", " << deviceProp.maxGridSize[1]
              << ", " << deviceProp.maxGridSize[2] << ")" << std::endl;
    std::cout << "  Warp size: " << deviceProp.warpSize << " threads"
              << std::endl;

    std::cout << "\n  --- Other Metrics ---" << std::endl;
    std::cout << "  GPU clock rate: " << deviceProp.clockRate / 1000 << " MHz"
              << std::endl;
    std::cout << "  Concurrent kernels: "
              << (deviceProp.concurrentKernels ? "Yes" : "No") << std::endl;
    std::cout << "  Device is integrated (vs. discrete): "
              << (deviceProp.integrated ? "Yes" : "No") << std::endl;
    std::cout << "----------------------------------------" << std::endl;
  }

  checkCudaErrors(cudaDeviceReset());

  return 0;
}
